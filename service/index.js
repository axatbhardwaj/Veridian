const express = require('express');
const cors = require('cors');
const multer = require('multer');
const { PrismaClient } = require('@prisma/client');
const { keccak256 } = require('js-sha3');
const { buildPaymentRequirements, verifyPayment, settlePayment } = require('./x402');

const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 5402;

const ADDRESS = process.env.ADDRESS || '0xA7635CdB2B835737FdcE78Ea22F06Fb78101110f';
const FACILITATOR_URL = process.env.FACILITATOR_URL || 'https://facilitator.shubh.sh';
const AMOY_USDC_ADDRESS = process.env.AMOY_USDC_ADDRESS || '0x41E94Eb019C0762f9Bfcf9Fb1E58725BfB0e7582';

// Middleware
app.use(cors());
app.use(express.json());

// Configure multer for file uploads
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'text/markdown' || file.originalname.endsWith('.md') || file.originalname.endsWith('.mdx')) {
      cb(null, true);
    } else {
      cb(new Error('Only markdown files are allowed'), false);
    }
  },
});

// Health check endpoint
app.get('/healthz', (req, res) => {
  res.json({ status: 'ok', service: 'veridian-service', facilitator: FACILITATOR_URL });
});

// Legacy health endpoint for compatibility
app.get('/health', (req, res) => {
  res.json({ status: 'OK', message: 'Server is running' });
});

// Upload content endpoint
app.post('/api/upload', upload.single('file'), async (req, res) => {
  try {
    console.log('Upload request received');
    console.log('Body:', req.body);
    console.log('File:', req.file ? { name: req.file.originalname, size: req.file.size } : 'No file');

    const { title, keywords, userAddress, price } = req.body;
    const file = req.file;

    // Validate required fields
    if (!file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    if (!title || !title.trim()) {
      return res.status(400).json({ error: 'Title is required' });
    }

    if (!userAddress || !userAddress.trim()) {
      return res.status(400).json({ error: 'User address is required' });
    }

    // Parse keywords (already generated by frontend from evaluator service)
    let keywordsArray = [];
    if (keywords) {
      try {
        keywordsArray = JSON.parse(keywords);
      } catch (e) {
        keywordsArray = keywords.split(',').map(k => k.trim()).filter(k => k);
      }
    }

    if (keywordsArray.length === 0) {
      return res.status(400).json({ error: 'At least one keyword is required' });
    }

    // Convert array to comma-separated string for SQLite storage
    const keywordsString = keywordsArray.join(',');

    // Parse price (already generated by frontend from evaluator service)
    let priceValue = 1; // default price in dollars
    if (price) {
      try {
        priceValue = parseFloat(price);
      } catch (e) {
        console.warn('Invalid price format, using default:', price);
      }
    }

    // Get file content
    const content = file.buffer.toString('utf-8');

    // Calculate Keccak-256 hash
    const contentHash = keccak256(content);

    // Check if content with this hash already exists
    const existingContent = await prisma.content.findUnique({
      where: { contentHash }
    });

    if (existingContent) {
      return res.status(409).json({
        error: 'Content with this hash already exists',
        existingContent: {
          id: existingContent.id,
          title: existingContent.title,
          userAddress: existingContent.userAddress
        }
      });
    }

    // Save to database
    const newContent = await prisma.content.create({
      data: {
        title: title.trim(),
        content,
        contentHash,
        userAddress: userAddress.trim(),
        keywords: keywordsString,
        fileName: file.originalname,
        fileSize: file.size,
        price: Math.round(priceValue * 100) // Convert dollars to cents for storage
      }
    });

    res.status(201).json({
      message: 'Content uploaded successfully',
      content: {
        id: newContent.id,
        title: newContent.title,
        contentHash: newContent.contentHash,
        userAddress: newContent.userAddress,
        keywords: newContent.keywords.split(',').map(k => k.trim()).filter(k => k),
        fileName: newContent.fileName,
        fileSize: newContent.fileSize,
        price: newContent.price / 100, // Convert back to dollars for response
        createdAt: newContent.createdAt
      }
    });

  } catch (error) {
    console.error('Upload error:', error);
    console.error('Error stack:', error.stack);

    if (error.code === 'P2002') {
      return res.status(409).json({ error: 'Content with this hash already exists' });
    }

    res.status(500).json({
      error: 'Internal server error',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Get all content endpoint
app.get('/api/content', async (req, res) => {
  try {
    const contents = await prisma.content.findMany({
      select: {
        id: true,
        title: true,
        contentHash: true,
        userAddress: true,
        keywords: true,
        fileName: true,
        fileSize: true,
        price: true,
        createdAt: true,
        updatedAt: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    // Convert price from cents to dollars and keywords from string to array for response
    const contentsWithPrice = contents.map(content => ({
      ...content,
      price: content.price / 100,
      keywords: content.keywords.split(',').map(k => k.trim()).filter(k => k)
    }));

    res.json({ contents: contentsWithPrice });
  } catch (error) {
    console.error('Get content error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

// Get content hashes and keywords (for evaluator agent)
app.get('/api/content-hashes-keywords', async (req, res) => {
  try {
    const contents = await prisma.content.findMany({
      select: {
        contentHash: true,
        keywords: true
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    const result = contents.map(c => ({
      hash: c.contentHash,
      keywords: c.keywords.split(',').map(k => k.trim()).filter(k => k)
    }));

    res.json(result);
  } catch (error) {
    console.error('Get content hashes and keywords error:', error);
    res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
});

// Get content by hash (paywalled)
app.get('/api/content/:hash', async (req, res) => {
  const paymentHeader = req.headers['x-payment'];

  if (!paymentHeader) {
    const { hash } = req.params;

    // Get content to determine the actual price
    try {
      const content = await prisma.content.findUnique({ where: { contentHash: hash } });

      if (!content) {
        return res.status(404).json({ error: 'Content not found' });
      }

      const resourceUrl = `https://backend.shubh.sh/api/content/${hash}`;
      const accepts = [buildPaymentRequirements(resourceUrl, ADDRESS, AMOY_USDC_ADDRESS, content.price)];
      return res.status(402).json({ accepts });
    } catch (error) {
      console.error('Error fetching content for payment requirements:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
  }

  try {
    const verify = await verifyPayment(paymentHeader);
    if (!verify || !verify.success) {
      return res.status(402).json({ error: 'payment_verification_failed', details: verify });
    }
  } catch (e) {
    return res.status(502).json({ error: 'facilitator_unreachable', details: String(e) });
  }

  try {
    const { hash } = req.params;
    const content = await prisma.content.findUnique({ where: { contentHash: hash } });

    if (!content) {
      return res.status(404).json({ error: 'Content not found' });
    }

    try {
      const settle = await settlePayment(paymentHeader);
      const resp = settle.data || {};
      const responsePayload = {
        success: !!resp.success,
        transaction: resp.transaction || null,
        network: 'polygon-amoy',
        payer: resp.payer || null
      };
      const b64 = Buffer.from(JSON.stringify(responsePayload)).toString('base64');
      res.setHeader('X-PAYMENT-RESPONSE', b64);
    } catch (e) {
      const errPayload = { success: false, error: String(e) };
      const b64 = Buffer.from(JSON.stringify(errPayload)).toString('base64');
      res.setHeader('X-PAYMENT-RESPONSE', b64);
    }

    // Convert keywords from string to array for API response
    const contentWithKeywords = {
      ...content,
      keywords: content.keywords.split(',').map(k => k.trim()).filter(k => k)
    };

    res.json({ content: contentWithKeywords });
  } catch (error) {
    console.error('Get content by hash error:', error);
    res.status(500).json({ error: 'Internal server error', message: error.message });
  }
});

// Legacy A2A endpoint for backward compatibility with demo
app.get('/a2a/content/:hash', async (req, res) => {
  const { hash } = req.params;
  const clientPaymentHeader = req.headers['x-payment'];

  try {
    // If no payment header, return 402 with payment requirements
    if (!clientPaymentHeader) {
      const resourceUrl = `https://backend.shubh.sh/a2a/content/${hash}`;

      // Get content to determine the actual price
      try {
        const content = await prisma.content.findUnique({ where: { contentHash: hash } });

        if (!content) {
          return res.status(404).json({ error: 'Content not found' });
        }

        const accepts = [buildPaymentRequirements(resourceUrl, ADDRESS, AMOY_USDC_ADDRESS, content.price)];
        return res.status(402).json({ accepts });
      } catch (error) {
        console.error('Error fetching content for payment requirements:', error);
        return res.status(500).json({ error: 'Internal server error' });
      }
    }

    // Verify payment
    const verify = await verifyPayment(clientPaymentHeader);
    if (!verify || !verify.success) {
      return res.status(402).json({ error: 'payment_verification_failed', details: verify });
    }

    // Get content
    const content = await prisma.content.findUnique({ where: { contentHash: hash } });
    if (!content) {
      return res.status(404).json({ error: 'Content not found' });
    }

    // Settle payment
    try {
      const settle = await settlePayment(clientPaymentHeader);
      const resp = settle.data || {};
      const responsePayload = {
        success: !!resp.success,
        transaction: resp.transaction || null,
        network: 'polygon-amoy',
        payer: resp.payer || null
      };
      const b64 = Buffer.from(JSON.stringify(responsePayload)).toString('base64');
      res.setHeader('X-PAYMENT-RESPONSE', b64);
    } catch (e) {
      const errPayload = { success: false, error: String(e) };
      const b64 = Buffer.from(JSON.stringify(errPayload)).toString('base64');
      res.setHeader('X-PAYMENT-RESPONSE', b64);
    }

    return res.json({ content });
  } catch (e) {
    if (e.response) {
      return res.status(e.response.status).json(e.response.data);
    }
    return res.status(500).json({ error: 'Service error', message: String(e) });
  }
});

// Error handling middleware
app.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    if (error.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ error: 'File too large. Maximum size is 10MB.' });
    }
  }

  console.error('Unhandled error:', error);
  res.status(500).json({
    error: 'Internal server error',
    message: error.message
  });
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('Shutting down server...');
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('Shutting down server...');
  await prisma.$disconnect();
  process.exit(0);
});

// Start server
app.listen(PORT, () => {
  console.log(`Veridian Service listening on port ${PORT}`);
  console.log(`Health check: http://localhost:${PORT}/healthz`);
  console.log(`API docs: http://localhost:${PORT}/health`);
});
